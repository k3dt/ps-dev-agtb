<?php

/*
CREATE TABLE `pardot_log_messages` (
  `id` int NOT NULL AUTO_INCREMENT,
  `message` varchar(255) NOT NULL DEFAULT '',
  primary key (id)
);

CREATE TABLE `pardot_log` (
  `id` int NOT NULL AUTO_INCREMENT,
  `pardot_id` int NOT NULL,
  `touchpoint_id` varchar(36) NOT NULL,
  `pardot_action` char(1) NOT NULL,
  `sugar_action` char(1) NOT NULL,
  `success` TINYINT NOT NULL default 1,
  `date` datetime,
  `message_id` int,
  primary key (id),
  foreign key (message_id) references pardot_log_messages(id)
);
*/

class pardotLogger {
	
	// These values are passed in by the user
	var $pardot_id;
	var $touchpoint_id;
	var $pardot_action;
	var $sugar_action;
	var $success;
	var $message; // This maps to the pardot_log_messages message column
	
	// These values are automatically set
	var $date;
	var $log_id; // This maps to the pardot_log id column
	var $message_id; // This maps to the pardot_log message_id and pardot_log_messages id column

	var $pardot_action_map = array(
		'create' => 'c',
		'read' => 'r',
		'query' => 'q',
		'update' => 'u',
		'upsert' => 's',
	);
	
	var $sugar_action_map = array(
		'insert' => 'i',
		'update' => 'u',
		'activity' => 'a',
	);
	
	public function __construct() {
		// Initialize values to empty string
		foreach($this as $var => $value){
			if(!is_array($this->$var) && is_null($this->$var)){
				$this->$var = '';
			}
		}
	}
	
	private function assertSugarDatabase(){
		if(!isset($GLOBALS['db'])){
			echo "Generated by ".__FILE__." on line ".__LINE__."\n";
			die('The pardot api must be used within the context of Sugar');
		}
	}
	
	public function setValuesFromArray($data){
		// Set the values from the data
		foreach($data as $key => $value){
			if(isset($this->$key)){
				if($key == 'pardot_action' && array_key_exists($value, $this->pardot_action_map)){
					$value = $this->pardot_action_map[$value];
				}
				if($key == 'sugar_action' && array_key_exists($value, $this->sugar_action_map)){
					$value = $this->sugar_action_map[$value];
				}
				$this->$key = $value;
			}
		}
	}
	
	// Retrieve message ID and create
	private function retrieveOrCreateMessageID($message){
		self::assertSugarDatabase();
		
		$message_id = self::retrieveMessageID($message);
		
		if($message_id === false){
			$insert = "INSERT INTO pardot_log_messages SET message = '{$message}'";
			$GLOBALS['db']->query($insert);
			$message_id = self::retrieveMessageID($message);
		}
		
		return $message_id;
	}
	
	// Retrieve message ID and don't create
	private function retrieveMessageID($message){
		self::assertSugarDatabase();
		
		$message_id = false;
		
		$query = "SELECT id FROM pardot_log_messages WHERE message = '{$message}'";
		$res = $GLOBALS['db']->query($query);
		if($res){
			$row = $GLOBALS['db']->fetchByAssoc($res);
			if(!empty($row['id'])){
				$message_id = $row['id'];
			}
		}
		
		return $message_id;
	}
	
	// Reset 
	private function clearValues(){
		foreach($this as $var => $value){
			if(!is_array($this->$var)){
				$this->$var = '';
			}
		}
	}
	
	public function writeLog($data = array()){
		self::assertSugarDatabase();
		
		if(!empty($data)){
			self::setValuesFromArray($data);
		}
		
		$message_id = 'NULL';
		if(!empty($this->message)){
			$message_id = self::retrieveOrCreateMessageID($this->message);
			if($message_id === false)
				$message_id = 'NULL';
		}
		$this->message_id = $message_id;
		
		$date = gmdate('Y-m-d H:i:s');
		$insert = "INSERT INTO pardot_log \n".
				  "SET pardot_id = '{$this->pardot_id}', \n".
				  "    touchpoint_id = '{$this->touchpoint_id}', \n".
				  "    pardot_action = '{$this->pardot_action}', \n".
				  "    sugar_action = '{$this->sugar_action}', \n".
				  "    success = '{$this->success}', \n".
				  "    date = '{$date}', \n".
				  "    message_id = {$this->message_id} \n";
		
		$GLOBALS['db']->query($insert);

		self::clearValues();
	}
}
