<?php
/*********************************************************************************
 * The contents of this file are subject to the SugarCRM Professional End User
 * License Agreement ("License") which can be viewed at
 * http://www.sugarcrm.com/EULA.  By installing or using this file, You have
 * unconditionally agreed to the terms and conditions of the License, and You may
 * not use this file except in compliance with the License. Under the terms of the
 * license, You shall not, among other things: 1) sublicense, resell, rent, lease,
 * redistribute, assign or otherwise transfer Your rights to the Software, and 2)
 * use the Software for timesharing or service bureau purposes such as hosting the
 * Software for commercial gain and/or for the benefit of a third party.  Use of
 * the Software may be subject to applicable fees and any use of the Software
 * without first paying applicable fees is strictly prohibited.  You do not have
 * the right to remove SugarCRM copyrights from the source code or user interface.
 * All copies of the Covered Code must include on each user interface screen:
 * (i) the "Powered by SugarCRM" logo and (ii) the SugarCRM copyright notice
 * in the same form as they appear in the distribution.  See full license for
 * requirements.  Your Warranty, Limitations of liability and Indemnity are
 * expressly stated in the License.  Please refer to the License for the specific
 * language governing these rights and limitations under the License.
 * Portions created by SugarCRM are Copyright (C) 2004 SugarCRM, Inc.;
 * All Rights Reserved.
 ********************************************************************************/
require_once('data/SugarBean.php');
require_once('modules/Contacts/Contact.php');
require_once('modules/SNIP/SugarSNIP.php');
require_once('include/TimeDate.php');

class CreateObjectTest extends Sugar_PHPUnit_Framework_TestCase {
	private $snip;
	private $orig_file = '';

	// create a Contacts object
	public function testCreateContactsObject () {
		// create email and import to snip
		$email['message']['message_id'] = '48812';
		$email['message']['from_name'] = 'Cathy Contacts <contacts@testsugar.info>';
		$email['message']['description'] = 'Testing SNIP to Contacts definition';
		$email['message']['description_html'] = 'Testing <u>SNIP</u> to Contacts definition';
		$email['message']['to_addrs'] = 'sugar.phone@example.name';
		$email['message']['cc_addrs'] = 'sugar.section.dev@example.net';
		$email['message']['bcc_addrs'] = 'qa.sugar@example.net';
		$email['message']['date_sent'] = '2010-01-11 01:30:00';
		$email['message']['subject'] = 'Contacts test subject';
		$email['user'] = 'Administrator';
		$this->snip->importEmail($email);

		// get email's ID
		$e = new Email();
		$e->retrieve_by_string_fields(array("message_id" => $email['message']['message_id']));
		$this->assertEquals((isset($e->id) && !empty($e->id)), true);

		// retrieve contact that was generated by snip
		$contact = new Contact();
		$contact->retrieve_by_string_fields(array('department' => $e->id));
		$this->assertEquals((isset($contact->id) && !empty($contact->id)), true);

		// validate object members
		$this->assertEquals($contact->last_name, 'Cathy Contacts');
		$this->assertEquals($contact->department, $e->id);
		$this->assertEquals($contact->description, $email['message']['description'].' '.$e->id.' '.$email['message']['message_id'].' '.$email['message']['subject'].' '.htmlentities($email['message']['from_name']));
		$this->assertEquals($contact->lead_source, 'Email');
		$this->assertEquals($contact->date_entered, gmdate($GLOBALS['timedate']->get_db_date_time_format(), strtotime($email['message']['date_sent'])));

		$e->delete($e->id);
	}

	// create a Cases object
	public function testCreateCasesObject () {
		// create email and import to snip
		$email['message']['message_id'] = '67070';
		$email['message']['from_name'] = 'Corey Cases <cases@testsugar.info>';
		$email['message']['description'] = 'Testing SNIP to Cases definition';
		$email['message']['description_html'] = 'Testing <u>SNIP</u> to Cases definition';
		$email['message']['to_addrs'] = 'sugar.phone@example.name';
		$email['message']['cc_addrs'] = 'sugar.section.dev@example.net';
		$email['message']['bcc_addrs'] = 'qa.sugar@example.net';
		$email['message']['date_sent'] = '2010-01-11 01:30:00';
		$email['message']['subject'] = 'Cases test subject';
		$email['user'] = 'Administrator';
		$this->snip->importEmail($email);

		// get email's ID
		$e = new Email();
		$e->retrieve_by_string_fields(array("message_id" => $email['message']['message_id']));
		$this->assertEquals((isset($e->id) && !empty($e->id)), true);

		// retrieve opportunity that was generated by snip
		$case = new aCase();
		$case->retrieve_by_string_fields(array('resolution' => $e->id));
		$this->assertEquals((isset($case->id) && !empty($case->id)), true);

		// validate object members
		$this->assertEquals($case->name, 'Corey Cases');
		$this->assertEquals($case->resolution, $e->id);
		$this->assertEquals($case->description, $email['message']['description'].' '.$e->id.' '.$email['message']['message_id'].' '.$email['message']['subject'].' '.htmlentities($email['message']['from_name']));
		$this->assertEquals($case->date_entered, gmdate($GLOBALS['timedate']->get_db_date_time_format(), strtotime($email['message']['date_sent'])));

		$e->delete($e->id);
	}

	// create an Opportunity object
	public function testCreateOpportunitiesObject () {
		// create email and import to snip
		$email['message']['message_id'] = '79708';
		$email['message']['from_name'] = 'Oscar Opportunities <opp@testsugar.info>';
		$email['message']['description'] = 'Testing SNIP to Opportunities definition';
		$email['message']['description_html'] = 'Testing <u>SNIP</u> to Opportunities definition';
		$email['message']['to_addrs'] = 'sugar.phone@example.name';
		$email['message']['cc_addrs'] = 'sugar.section.dev@example.net';
		$email['message']['bcc_addrs'] = 'qa.sugar@example.net';
		$email['message']['date_sent'] = '2010-01-11 01:30:00';
		$email['message']['subject'] = 'Cases test subject';
		$email['user'] = 'Administrator';
		$this->snip->importEmail($email);

		// get email's ID
		$e = new Email();
		$e->retrieve_by_string_fields(array("message_id" => $email['message']['message_id']));
		$this->assertEquals((isset($e->id) && !empty($e->id)), true);

		// retrieve opportunity that was generated by snip
		$opp = new Opportunity();
		$opp->retrieve_by_string_fields(array('sales_stage' => $e->id));
		$this->assertEquals((isset($opp->id) && !empty($opp->id)), true);

		// validate object members
		$this->assertEquals($opp->name, 'Oscar Opportunities');
		$this->assertEquals($opp->sales_stage, $e->id);
		$this->assertEquals($opp->description, $email['message']['description'].' '.$e->id.' '.$email['message']['message_id'].' '.$email['message']['subject'].' '.htmlentities($email['message']['from_name']));
		$this->assertEquals($opp->date_entered, gmdate($GLOBALS['timedate']->get_db_date_time_format(), strtotime($email['message']['date_sent'])));

		$e->delete($e->id);
	}

	public function setUp () {
	    global $current_user;

	    // setup new anonymous user
	    $current_user = SugarTestUserUtilities::createAnonymousUser();
	    $GLOBALS['current_user'] = $current_user;

	    // copy over existing createdefs.php
	    if (file_exists('custom/modules/SNIP/createdefs.php')) {
	    	$this->orig_file = tempnam('custom/modules/SNIP', 'SNIP');
	    	rename ('custom/modules/SNIP/createdefs.php', $this->orig_file);
	    }

	    // create necessary folders before we copy our test createdefs.php file
	    if (!is_dir ('custom/modules'))
	    	mkdir ('custom/modules');

	    if (!is_dir ('custom/modules/SNIP'))
	    	mkdir ('custom/modules/SNIP');

	    // copy our test data file
	    copy ('tests/modules/SNIP/createdefs.php', 'custom/modules/SNIP/createdefs.php');

	    // initiate snip
		$this->snip = SugarSNIP::getInstance();
	}

	public function tearDown () {
		// remove anonymous user
		SugarTestUserUtilities::removeAllCreatedAnonymousUsers();
		unset($GLOBALS['current_user']);

		// delete our test createdefs and restore original file
		unlink ('custom/modules/SNIP/createdefs.php');
		rename ($this->orig_file, 'custom/modules/SNIP/createdefs.php');

		unset ($this->snip);
	}
}
?>