(function(app) {

    /**
     * Base View class. Use {@link View.ViewManager} to create instances of views.
     *
     * @class View.View
     * @alias SUGAR.App.view.View
     */
    app.view.View = app.view.Component.extend({

        /**
         * TODO: add docs (describe options parameter, see Component class for an example).
         * @constructor
         * @param options
         */
        initialize: function(options) {
            app.view.Component.prototype.initialize.call(this, options);

            // TODO: Do we need this?
            //_.bindAll(this);

            /**
             * Name of the view (required).
             * @cfg {String}
             */
            this.name = options.name;

            /**
             * Id of the View. Autogenerated if not specified.
             * @property {String}
             * @member {View.View}
             */
            this.id = options.id || this.getID();

            /**
             * Template to render (optional).
             * @cfg {Function}
             */
            this.template = app.template.getView(this.name, this.module) ||
                            app.template.getView(this.name);

            /**
             * Dictionary of field widgets.
             *
             * - keys: field IDs (sfuuid)
             * - value: instances of `app.view.Field` class
             */
            this.fields = {};

            this.$el.addClass("view " + this.name);

            /**
             * A template to use for view fields if a field does not have a template defined for its parent view.
             * Defaults to `"default"`.
             *
             * For example, if you have a subview and don't want to define subview template for all field types,
             * you may choose to use existing templates like `detail` if your subview is in fact a detail view.
             *
             * @property {String}
             */
            this.fallbackFieldTemplate = "default";
        },

        /**
         * Renders the view onto the page.
         *
         * This method should be overriden by subclasses instead of the formal render function
         * if they need more advanced rendering or do not use a template.
         * @protected
         */
        _render: function() {
            // Bad templates can cause a JS error that we want to catch here
            if (this.template) {
                try {
                    this.$el.html(this.template(this));
                } catch (e) {
                    app.logger.error("Failed to render '" + this.name + "' view.\n" + e);
                    // TODO: trigger app event to render an error message
                }
            }
        },

        /**
         * Renders a field.
         *
         * This method sets field's view element and invokes render on the given field.
         * @param {View.Field} field The field to render
         * @protected
         */
        _renderField: function(field) {
            field.setElement(this.$("span[sfuuid='" + field.sfId + "']"));
            try {
                field.render();
            } catch (e) {
                app.logger.error("Failed to render field '" + field.name + "' on '" + this.name + "' view.\n" + e);
                // TODO: trigger app event to render an error message
            }
        },

        /**
         * Renders the view onto the page.
         * See Backbone.View documentation for details.
         * @return {Object} Reference to this view.
         */
        render: function() {
            if (app.acl.hasAccess(this.name, this.context.get("model"))) {
                this._render();
                // Render will create a placeholder for sugar fields. we now need to populate those fields
                _.each(this.fields, function(field) {
                    this._renderField(field);
                }, this);
            } else {
                app.logger.info("Current user does not have access to this module view.");
                //TODO trigger app event to notify user about no access
            }

            return this;
        },

        /**
         * Extracts the fields from the metadata for directly related views/panels
         * TODO: Possibly refactor
         * @return {Array} List of fields used on this view
         */
        getFields: function() {
            var fields = [];
            var module = this.context.get('module');
            var fieldMetadata;

            if (this.meta && this.meta.panels) {
                _.each(this.meta.panels, function(panel) {
                    fields = fields.concat(_.pluck(panel.fields, 'name'));
                });
            }

            var result = _.filter(_.uniq(fields), function(value) {
                return value;
            });

            // we need to find the relates and add the actual id fields
            fieldMetadata = app.metadata.getModule(module, 'fields');
            if (fieldMetadata) {
                _.each(result, function(entry) {
                    if (fieldMetadata[entry] && fieldMetadata[entry].type == 'relate') {
                        result.push(fieldMetadata[entry].id_name);
                    }
                });
            }


            return result;
        },

        /**
         * Returns the html id of this view's el. Will create one if one doesn't exist.
         * @return {String} id of this view.
         */
        getID: function() {
            return (this.id || this.module || "") + "_" + this.name;
        }

    });


})(SUGAR.App);